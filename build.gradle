// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.hilt_version = '2.52'
    ext.room_version = '2.6.1'
    ext.useCrashlytics = file("networksurvey/google-services.json").exists()
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.2.1'
        if (useCrashlytics) {
            classpath 'com.google.gms:google-services:4.4.2'
            classpath 'com.google.firebase:firebase-crashlytics-gradle:3.0.2'
        }
        classpath "com.google.dagger:hilt-android-gradle-plugin:$hilt_version"
        classpath "com.google.devtools.ksp:com.google.devtools.ksp.gradle.plugin:1.9.24-1.0.20"
    }
}

plugins {
    alias(libs.plugins.org.jetbrains.kotlin.android) apply false
    //alias(libs.plugins.compose.compiler) apply false
    alias(libs.plugins.kotlin.kapt) apply false
    alias(libs.plugins.kotlin.parcelize) apply false
    //alias(libs.plugins.google.devtools.ksp) apply false
}

allprojects {
    repositories {
        mavenLocal()
        google()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }
}

tasks.register('clean', Delete) {
    delete rootProject.layout.buildDirectory
}

tasks.register("downloadBluetoothCompanyIdentifiers") {
    group = "network-survey"
    description = "Downloads the Bluetooth SIG company_identifiers.yaml file"

    doLast {
        def targetDir = file("networksurvey/src/main/assets")
        if (!targetDir.exists()) {
            targetDir.mkdirs()
        }

        def fileUrl = "https://bitbucket.org/bluetooth-SIG/public/raw/main/assigned_numbers/company_identifiers/company_identifiers.yaml\n"
        def outputFile = new File(targetDir, "company_identifiers.yaml")

        println "Downloading file from $fileUrl..."
        new URL(fileUrl).withInputStream { input ->
            outputFile.withOutputStream { out ->
                out << input
            }
        }
        println "Saved to ${outputFile.absolutePath}"
    }
}

tasks.register("downloadBluetoothMemberUuids") {
    group = "network-survey"
    description = "Downloads the Bluetooth SIG member_uuids.yaml file"

    doLast {
        def targetDir = file("networksurvey/src/main/assets")
        if (!targetDir.exists()) {
            targetDir.mkdirs()
        }

        def fileUrl = "https://bitbucket.org/bluetooth-SIG/public/raw/main/assigned_numbers/uuids/member_uuids.yaml"
        def outputFile = new File(targetDir, "member_uuids.yaml")

        println "Downloading file from $fileUrl..."
        new URL(fileUrl).withInputStream { input ->
            outputFile.withOutputStream { out ->
                out << input
            }
        }
        println "Saved to ${outputFile.absolutePath}"
    }
}


// Only run before release builds
afterEvaluate {
    if (tasks.findByName("preReleaseBuild")) {
        tasks.named("preReleaseBuild") {
            dependsOn("downloadBluetoothCompanyIdentifiers", "downloadBluetoothMemberUuids")
        }
    }
}
